import sqlite3
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    ReplyKeyboardRemove,
    InputMediaPhoto
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from config import ADMIN_ID, BOT_TOKEN

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Bot initialization
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Database setup
conn = sqlite3.connect('earn_bot.db', check_same_thread=False)
cursor = conn.cursor()

# Create tables
def create_tables():
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        balance REAL DEFAULT 0,
        earned REAL DEFAULT 0,
        referral_id INTEGER DEFAULT NULL,
        referrals_count INTEGER DEFAULT 0,
        earned_from_refs REAL DEFAULT 0,
        is_banned BOOLEAN DEFAULT FALSE,
        registration_date TEXT DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tasks (
        task_id INTEGER PRIMARY KEY AUTOINCREMENT,
        description TEXT,
        link TEXT,
        reward REAL,
        creation_date TEXT DEFAULT CURRENT_TIMESTAMP,
        is_active BOOLEAN DEFAULT TRUE,
        max_completions INTEGER DEFAULT NULL,
        completions_count INTEGER DEFAULT 0
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS completed_tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        task_id INTEGER,
        completion_date TEXT DEFAULT CURRENT_TIMESTAMP,
        screenshot_id TEXT DEFAULT NULL,
        is_verified BOOLEAN DEFAULT FALSE,
        FOREIGN KEY(user_id) REFERENCES users(user_id),
        FOREIGN KEY(task_id) REFERENCES tasks(task_id)
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS task_screenshots (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        task_completion_id INTEGER,
        screenshot_id TEXT,
        position INTEGER,
        FOREIGN KEY(task_completion_id) REFERENCES completed_tasks(id)
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS payments (
        payment_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount REAL,
        payment_date TEXT DEFAULT CURRENT_TIMESTAMP,
        status TEXT DEFAULT 'pending',
        payment_method TEXT,
        wallet_data TEXT,
        FOREIGN KEY(user_id) REFERENCES users(user_id)
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS referral_earnings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        referrer_id INTEGER,
        referral_id INTEGER,
        amount REAL,
        earning_date TEXT DEFAULT CURRENT_TIMESTAMP,
        description TEXT,
        FOREIGN KEY(referrer_id) REFERENCES users(user_id),
        FOREIGN KEY(referral_id) REFERENCES users(user_id)
    )
    ''')
    conn.commit()

create_tables()

# States
class TaskStates(StatesGroup):
    description = State()
    link = State()
    reward = State()
    max_completions = State()

class WithdrawStates(StatesGroup):
    amount = State()
    wallet_data = State()

class VerifyTaskStates(StatesGroup):
    screenshot = State()
    more_screenshots = State()

class BroadcastStates(StatesGroup):
    message_content = State()
    confirmation = State()

# Helper functions
def is_user_banned(user_id: int) -> bool:
    cursor.execute("SELECT is_banned FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else False

async def check_ban_and_respond(message: types.Message):
    if is_user_banned(message.from_user.id):
        await message.answer(
            "‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.\n"
            "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—à–∏–±–∫–æ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @MargetSeller",
            reply_markup=ReplyKeyboardRemove()
        )
        return True
    return False

async def add_referral_earning(referral_id: int, amount: float, description: str):
    try:
        cursor.execute("SELECT referral_id FROM users WHERE user_id = ?", (referral_id,))
        row = cursor.fetchone()
        
        if row and row[0]:
            referrer_id = row[0]
            referral_bonus = amount * 0.10
            
            cursor.execute(
                "UPDATE users SET balance = balance + ?, earned_from_refs = earned_from_refs + ? WHERE user_id = ?", 
                (referral_bonus, referral_bonus, referrer_id)
            )
            
            cursor.execute(
                "INSERT INTO referral_earnings (referrer_id, referral_id, amount, description) VALUES (?, ?, ?, ?)",
                (referrer_id, referral_id, referral_bonus, description)
            )
            conn.commit()
            
            try:
                await bot.send_message(
                    referrer_id,
                    f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –∑–∞—Ä–∞–±–æ—Ç–∞–ª {amount:.2f} RUB\n"
                    f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10% –æ—Ç –µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞: {referral_bonus:.2f} RUB\n"
                    f"üìù –û–ø–µ—Ä–∞—Ü–∏—è: {description}"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_referral_earning: {e}")

# Keyboards
def main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    
    if is_user_banned(user_id):
        return ReplyKeyboardRemove()
    
    builder.row(
        KeyboardButton(text="üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"),
        KeyboardButton(text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å")
    )
    builder.row(
        KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"),
        KeyboardButton(text="üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
    )
    if user_id == ADMIN_ID:
        builder.row(KeyboardButton(text="üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    return builder.as_markup(resize_keyboard=True)

def admin_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
    )
    builder.row(
        KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"),
        KeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    )
    builder.row(
        KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"),
        KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
    )
    builder.row(
        KeyboardButton(text="üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"),
        KeyboardButton(text="üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"),
        KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    return builder.as_markup(resize_keyboard=True)

# ========== COMMAND HANDLERS ==========
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    
    if is_user_banned(user_id):
        await message.answer(
            "‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.\n"
            "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—à–∏–±–∫–æ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @MargetSeller",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    username = message.from_user.username
    
    # Handle referral link
    ref_id = None
    if len(message.text.split()) > 1:
        try:
            ref_id = int(message.text.split()[1])
            if ref_id == user_id:
                await message.answer("‚ùå –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É!")
                ref_id = None
        except ValueError:
            pass

    # Register user
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
    
    # If new user and has referral
    if cursor.rowcount == 1 and ref_id:
        cursor.execute("UPDATE users SET referral_id = ? WHERE user_id = ?", (ref_id, user_id))
        cursor.execute("UPDATE users SET referrals_count = referrals_count + 1 WHERE user_id = ?", (ref_id,))
        await bot.send_message(ref_id, f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! @{username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.")
    
    conn.commit()
    
    bot_info = await bot.get_me()
    await message.answer(
    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ONI!\n\n"
    f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{bot_info.username}?start={user_id}\n"
    f"üíé –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10% –æ—Ç –µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞!\n\n"
    f"üõ°Ô∏è–ü—Ä–æ–¥–æ–ª–∂–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
    f"      –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ [–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è](https://telegra.ph/Usloviya-polzovaniya-botom-ONI-06-30)\n\n"
    f"üìå–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è'",
    parse_mode="Markdown",  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Markdown-—Å—Å—ã–ª–æ–∫
    disable_web_page_preview=True,  # –û—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
    reply_markup=main_keyboard(user_id)
    )

# ========== TASK SYSTEM ==========
@dp.message(F.text == "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
async def show_tasks(message: types.Message, state: FSMContext):
    if await check_ban_and_respond(message):
        return
    
    user_id = message.from_user.id
    
    cursor.execute("""
        SELECT * FROM tasks 
        WHERE is_active = TRUE 
        AND (max_completions IS NULL OR completions_count < max_completions)
        ORDER BY task_id
    """)
    tasks = cursor.fetchall()

    if not tasks:
        await message.answer("üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
        return

    await state.update_data(tasks=tasks, current_task_index=0)
    await show_task(message, state)

async def show_task(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tasks = data['tasks']
    current_index = data['current_task_index']
    
    if current_index >= len(tasks):
        await message.answer("üéâ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è!")
        await state.clear()
        return
    
    task = tasks[current_index]
    task_id, description, link, reward, creation_date, is_active, max_completions, completions_count = task
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(
            text="‚úÖ –í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
            callback_data=f"take_task_{task_id}"
        )
    )
    
    if len(tasks) > 1:
        row_buttons = []
        if current_index > 0:
            row_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="prev_task"
            ))
        if current_index < len(tasks) - 1:
            row_buttons.append(InlineKeyboardButton(
                text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
                callback_data="next_task"
            ))
        if row_buttons:
            keyboard.row(*row_buttons)
    
    await message.answer(
        f"üìå –ó–∞–¥–∞–Ω–∏–µ #{task_id}\n\n"
        f"üìù {description}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {link}\n\n"
        f"üí∞ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {reward:.2f} RUB\n"
        f"üîÑ –î–æ—Å—Ç—É–ø–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {f'{completions_count}/{max_completions}' if max_completions else '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}",
        reply_markup=keyboard.as_markup(),
        disable_web_page_preview=True
    )

@dp.callback_query(F.data == "prev_task")
async def prev_task(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data['current_task_index']
    await state.update_data(current_task_index=current_index - 1)
    await callback.message.delete()
    await show_task(callback.message, state)
    await callback.answer()

@dp.callback_query(F.data == "next_task")
async def next_task(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data['current_task_index']
    await state.update_data(current_task_index=current_index + 1)
    await callback.message.delete()
    await show_task(callback.message, state)
    await callback.answer()

@dp.callback_query(F.data.startswith("take_task_"))
async def take_task(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if is_user_banned(user_id):
        await callback.answer("‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è", show_alert=True)
        return

    task_id = int(callback.data.split('_')[-1])

    # Check if already completed
    cursor.execute("SELECT * FROM completed_tasks WHERE user_id = ? AND task_id = ?", (user_id, task_id))
    if cursor.fetchone():
        await callback.answer("‚ùå –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!", show_alert=True)
        return

    # Check task availability
    cursor.execute("SELECT reward FROM tasks WHERE task_id = ? AND is_active = TRUE", (task_id,))
    task = cursor.fetchone()
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ!", show_alert=True)
        return

    reward = task[0]

    await state.update_data(task_id=task_id, reward=reward, screenshots=[])
    await state.set_state(VerifyTaskStates.screenshot)
    
    await callback.message.edit_text(
        "üìå –í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ!\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="screenshots_done")]
        ])
    )
    await callback.answer()

@dp.message(VerifyTaskStates.screenshot, F.photo)
async def process_task_screenshot(message: types.Message, state: FSMContext):
    screenshot_id = message.photo[-1].file_id
    data = await state.get_data()
    
    screenshots = data.get('screenshots', [])
    screenshots.append(screenshot_id)
    await state.update_data(screenshots=screenshots)
    
    await state.set_state(VerifyTaskStates.more_screenshots)
    await message.answer(
        "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_more_screenshots"),
             InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="screenshots_done")]
        ])
    )

@dp.callback_query(F.data == "add_more_screenshots", VerifyTaskStates.more_screenshots)
async def add_more_screenshots(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(VerifyTaskStates.screenshot)
    await callback.message.edit_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="screenshots_done")]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data == "screenshots_done")
async def finish_screenshots(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    task_id = data['task_id']
    reward = data['reward']
    screenshots = data.get('screenshots', [])
    
    if not screenshots:
        await callback.answer("‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç!", show_alert=True)
        return
    
    try:
        # Save first screenshot
        cursor.execute(
            "INSERT INTO completed_tasks (user_id, task_id, screenshot_id) VALUES (?, ?, ?)",
            (user_id, task_id, screenshots[0])
        )
        task_completion_id = cursor.lastrowid
        
        # Save additional screenshots
        for i, screenshot_id in enumerate(screenshots[1:], start=2):
            cursor.execute(
                "INSERT INTO task_screenshots (task_completion_id, screenshot_id, position) VALUES (?, ?, ?)",
                (task_completion_id, screenshot_id, i)
            )
        
        # Update completions count
        cursor.execute("UPDATE tasks SET completions_count = completions_count + 1 WHERE task_id = ?", (task_id,))
        conn.commit()
        
        # Notify admin
        media_group = []
        for i, screenshot_id in enumerate(screenshots, start=1):
            caption = (
                f"‚ö†Ô∏è –ù–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} (ID: {user_id})\n"
                f"üìå –ó–∞–¥–∞–Ω–∏–µ ID: {task_id}\n"
                f"üí∞ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {reward:.2f} RUB\n"
                f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç {i}/{len(screenshots)}"
                if i == 1 else ""
            )
            media_group.append(InputMediaPhoto(media=screenshot_id, caption=caption))
        
        await bot.send_media_group(ADMIN_ID, media=media_group)
        
        # Send approve/reject buttons
        await bot.send_message(
            ADMIN_ID,
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"verify_task_{user_id}_{task_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_task_{user_id}_{task_id}")
                ]
            ])
        )
        
        await state.clear()
        await callback.message.answer(
            "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
            "–û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.",
            reply_markup=main_keyboard(user_id)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_keyboard(user_id)
        )
        await state.clear()

@dp.callback_query(F.data.startswith("verify_task_"))
async def verify_task_completion(callback: types.CallbackQuery):
    try:
        parts = callback.data.split('_')
        user_id = int(parts[-2])
        task_id = int(parts[-1])
        
        cursor.execute("SELECT reward FROM tasks WHERE task_id = ?", (task_id,))
        task = cursor.fetchone()
        
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
            
        reward = task[0]
        
        cursor.execute(
            "UPDATE completed_tasks SET is_verified = TRUE WHERE user_id = ? AND task_id = ?",
            (user_id, task_id)
        )
        
        cursor.execute(
            "UPDATE users SET balance = balance + ?, earned = earned + ? WHERE user_id = ?",
            (reward, reward, user_id)
        )
        conn.commit()
        
        try:
            await bot.send_message(
                user_id,
                f"‚úÖ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ #{task_id} –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ!\n"
                f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {reward:.2f} RUB."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        await add_referral_earning(user_id, reward, f"–ó–∞–¥–∞–Ω–∏–µ #{task_id}")
        
        if callback.message.photo:
            await callback.message.edit_caption(
                caption=f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n"
                       f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}\n"
                       f"üí∞ –°—É–º–º–∞: {reward:.2f} RUB"
            )
        else:
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}\n"
                f"üí∞ –°—É–º–º–∞: {reward:.2f} RUB"
            )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith("reject_task_"))
async def reject_task_completion(callback: types.CallbackQuery):
    try:
        parts = callback.data.split('_')
        user_id = int(parts[-2])
        task_id = int(parts[-1])
        
        cursor.execute("SELECT id FROM completed_tasks WHERE user_id = ? AND task_id = ?", (user_id, task_id))
        completion_id = cursor.fetchone()[0]
        
        cursor.execute("DELETE FROM completed_tasks WHERE id = ?", (completion_id,))
        cursor.execute("DELETE FROM task_screenshots WHERE task_completion_id = ?", (completion_id,))
        cursor.execute("UPDATE tasks SET completions_count = completions_count - 1 WHERE task_id = ?", (task_id,))
        conn.commit()
        
        try:
            await bot.send_message(
                user_id,
                f"‚ùå –í–∞—à–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è #{task_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        if callback.message.photo:
            await callback.message.edit_caption(
                caption=f"‚ùå –ó–∞–¥–∞–Ω–∏–µ #{task_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!\n"
                       f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}"
            )
        else:
            await callback.message.edit_text(
                f"‚ùå –ó–∞–¥–∞–Ω–∏–µ #{task_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}"
            )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# ========== REFERRAL SYSTEM ==========
@dp.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
async def show_referral_info(message: types.Message):
    if await check_ban_and_respond(message):
        return
        
    user_id = message.from_user.id
    cursor.execute("SELECT referrals_count, earned_from_refs FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    
    if row:
        refs_count, earned_from_refs = row
        
        bot_info = await bot.get_me()
        await message.answer(
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/{bot_info.username}?start={user_id}\n\n"
            f"üíé –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!\n"
            f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {refs_count}\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {earned_from_refs:.2f} RUB\n\n"
            f"–ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –±—É–¥–µ—Ç –≤–∞—à –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥!"
        )

# ========== PAYMENT SYSTEM ==========
@dp.message(F.text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    if await check_ban_and_respond(message):
        return
        
    user_id = message.from_user.id
    cursor.execute("SELECT balance, earned, referrals_count, earned_from_refs FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    
    if row:
        balance, earned, refs_count, earned_from_refs = row
        await message.answer(
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} RUB\n"
            f"üíµ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earned:.2f} RUB\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {refs_count}\n"
            f"üéÅ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {earned_from_refs:.2f} RUB"
        )

@dp.message(F.text == "üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
async def withdraw_start(message: types.Message, state: FSMContext):
    if await check_ban_and_respond(message):
        return
        
    user_id = message.from_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    
    if row:
        balance = row[0]
        if balance < 50:
            await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 50 RUB. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} RUB")
            return
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üí≥ –í—ã–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É")],
                [KeyboardButton(text="ü§ñ –í—ã–≤–æ–¥ —á–µ—Ä–µ–∑ CryptoBot")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} RUB\n"
            f"üí≥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 50 RUB\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:",
            reply_markup=keyboard
        )

@dp.message(F.text == "üí≥ –í—ã–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É")
async def card_withdraw_start(message: types.Message, state: FSMContext):
    if await check_ban_and_respond(message):
        return
        
    user_id = message.from_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()[0]
    
    await state.set_state(WithdrawStates.amount)
    await state.update_data(withdrawal_method="card")
    await message.answer(
        f"üí≥ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} RUB\n"
        f"üí≥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 50 RUB\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(F.text == "ü§ñ –í—ã–≤–æ–¥ —á–µ—Ä–µ–∑ CryptoBot")
async def cryptobot_withdraw_start(message: types.Message, state: FSMContext):
    if await check_ban_and_respond(message):
        return
        
    user_id = message.from_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()[0]
    
    await state.set_state(WithdrawStates.amount)
    await state.update_data(withdrawal_method="cryptobot")
    await message.answer(
        f"ü§ñ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ CryptoBot\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} RUB\n"
        f"üí≥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 50 RUB\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(WithdrawStates.amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < 50:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 50 RUB")
            return
            
        user_id = message.from_user.id
        cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        balance = cursor.fetchone()[0]
        
        if amount > balance:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} RUB")
            return
            
        await state.update_data(amount=amount)
        data = await state.get_data()
        
        if data.get('withdrawal_method') == "card":
            await state.set_state(WithdrawStates.wallet_data)
            await message.answer(
                "üí≥ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É:\n"
                "<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</b>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <i>–¢–∏–Ω—å–∫–æ—Ñ—Ñ, 1234 5678 9012 3456</i>\n"
                "–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode="HTML"
            )
        else:
            await state.set_state(WithdrawStates.wallet_data)
            await message.answer(
                "ü§ñ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —é–∑–µ—Ä–Ω–µ–π–º –≤ CryptoBot (–Ω–∞–ø—Ä–∏–º–µ—Ä, @CryptoBot):\n\n"
                "–ö–∞–∫ –Ω–∞–π—Ç–∏ —é–∑–µ—Ä–Ω–µ–π–º –≤ CryptoBot:\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ @CryptoBot\n"
                "2. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å'\n"
                "3. –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ",
                reply_markup=ReplyKeyboardRemove()
            )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message(WithdrawStates.wallet_data)
async def process_wallet_data(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    wallet_data = message.text.strip()
    data = await state.get_data()
    amount = data['amount']
    withdrawal_method = data.get('withdrawal_method')
    
    try:
        if withdrawal_method == "card":
            if "," in wallet_data:
                bank_name, card_number = wallet_data.split(",", 1)
                wallet_data = f"{bank_name.strip()}, {card_number.strip()}"
            else:
                wallet_data = f"–ù–µ —É–∫–∞–∑–∞–Ω, {wallet_data}"
            
            payment_method = "Bank Card"
            
        elif withdrawal_method == "cryptobot":
            if not wallet_data.startswith('@'):
                wallet_data = f"@{wallet_data}"
            payment_method = "CryptoBot"
        
        # Deduct balance
        cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, user_id))
        
        # Create withdrawal request
        cursor.execute(
            "INSERT INTO payments (user_id, amount, payment_method, wallet_data) VALUES (?, ?, ?, ?)",
            (user_id, amount, payment_method, wallet_data)
        )
        conn.commit()
        
        # Notify admin
        await bot.send_message(
            ADMIN_ID,
            f"‚ö†Ô∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ {payment_method}!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {user_id})\n"
            f"üí∞ –°—É–º–º–∞: {amount:.2f} RUB\n"
            f"üìå –†–µ–∫–≤–∏–∑–∏—Ç—ã: {wallet_data}"
        )
        
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount:.2f} RUB —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"–°–ø–æ—Å–æ–±: {payment_method}\n"
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: {wallet_data}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
            reply_markup=main_keyboard(user_id)
        )
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_keyboard(user_id)
        )
        await state.clear()

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard(message.from_user.id))

# ========== ADMIN PANEL ==========
@dp.message(F.text == "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", F.from_user.id == ADMIN_ID)
async def admin_panel(message: types.Message):
    await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard())

@dp.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", F.from_user.id == ADMIN_ID)
async def back_to_main(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard(message.from_user.id))

# Task management
@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", F.from_user.id == ADMIN_ID)
async def add_task_command(message: types.Message, state: FSMContext):
    await state.set_state(TaskStates.description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())

@dp.message(TaskStates.description, F.from_user.id == ADMIN_ID)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(TaskStates.link)
    await message.answer("üîó –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:")

@dp.message(TaskStates.link, F.from_user.id == ADMIN_ID)
async def process_link(message: types.Message, state: FSMContext):
    await state.update_data(link=message.text)
    await state.set_state(TaskStates.reward)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ (–≤ RUB):")

@dp.message(TaskStates.reward, F.from_user.id == ADMIN_ID)
async def process_reward(message: types.Message, state: FSMContext):
    try:
        reward = float(message.text)
        if reward <= 0:
            await message.answer("‚ùå –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(reward=reward)
    await state.set_state(TaskStates.max_completions)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (–∏–ª–∏ 0 –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞):")

@dp.message(TaskStates.max_completions, F.from_user.id == ADMIN_ID)
async def process_max_completions(message: types.Message, state: FSMContext):
    try:
        max_completions = int(message.text)
        if max_completions < 0:
            await message.answer("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
            return
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    cursor.execute(
        "INSERT INTO tasks (description, link, reward, max_completions) VALUES (?, ?, ?, ?)",
        (data['description'], data['link'], data['reward'], max_completions if max_completions > 0 else None)
    )
    conn.commit()

    await state.clear()
    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=admin_keyboard())


@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", F.from_user.id == ADMIN_ID)
async def list_tasks(message: types.Message):
    cursor.execute("SELECT * FROM tasks ORDER BY task_id DESC")
    tasks = cursor.fetchall()

    if not tasks:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    response = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:\n\n"
    for task in tasks:
        task_id, description, link, reward, creation_date, is_active, max_completions, completions_count = task
        
        status = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
        limit = f"{completions_count}/{max_completions}" if max_completions else "‚àû"
        
        response += (
            f"üîπ ID: {task_id}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
            f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward:.2f} RUB\n"
            f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {limit}\n"
            f"üìÖ –î–∞—Ç–∞: {creation_date}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )

    await message.answer(response[:4000], disable_web_page_preview=True)

# ========== TASK DELETION SYSTEM ==========
@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", F.from_user.id == ADMIN_ID)
async def delete_task_command(message: types.Message):
    try:
        cursor.execute("""
            SELECT task_id, description 
            FROM tasks 
            WHERE description IS NOT NULL
            ORDER BY task_id DESC
        """)
        tasks = cursor.fetchall()

        if not tasks:
            await message.answer("üì≠ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        builder = InlineKeyboardBuilder()
        for task in tasks:
            task_id, description = task
            display_text = f"‚ùå –£–¥–∞–ª–∏—Ç—å #{task_id} - {description[:20]}" if description else f"‚ùå –£–¥–∞–ª–∏—Ç—å #{task_id}"
            builder.add(InlineKeyboardButton(
                text=display_text,
                callback_data=f"confirm_delete_task_{task_id}"
            ))
        builder.adjust(1)

        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
            "‚ö†Ô∏è –≠—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π",
            reply_markup=admin_keyboard()
        )

@dp.callback_query(F.data.startswith("confirm_delete_task_"), F.from_user.id == ADMIN_ID)
async def confirm_delete_task(callback: types.CallbackQuery):
    try:
        task_id = int(callback.data.split('_')[-1])
        
        cursor.execute("SELECT description FROM tasks WHERE task_id = ?", (task_id,))
        task_data = cursor.fetchone()
        
        if not task_data:
            await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
            
        task_description = task_data[0] or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"final_delete_task_{task_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            ]
        ])
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ?\n\n"
            f"ID: {task_id}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task_description[:100]}{'...' if len(task_description) > 100 else ''}\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=keyboard
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith("final_delete_task_"), F.from_user.id == ADMIN_ID)
async def final_delete_task(callback: types.CallbackQuery):
    try:
        task_id = int(callback.data.split('_')[-1])
        
        # Start transaction
        cursor.execute("BEGIN TRANSACTION")
        
        # Delete related records first
        cursor.execute("DELETE FROM completed_tasks WHERE task_id = ?", (task_id,))
        cursor.execute("DELETE FROM tasks WHERE task_id = ?", (task_id,))
        
        conn.commit()
        
        await callback.message.edit_text(
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!"
        )
        await callback.answer()
        
    except Exception as e:
        conn.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        )

@dp.callback_query(F.data == "cancel_delete", F.from_user.id == ADMIN_ID)
async def cancel_delete(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", show_alert=True)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç–∞–º–∏
@dp.message(F.text == "üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", F.from_user.id == ADMIN_ID)
async def show_withdraw_requests(message: types.Message):
    cursor.execute("""
        SELECT payment_id, user_id, amount, payment_method, wallet_data 
        FROM payments 
        WHERE status = 'pending' 
        ORDER BY payment_date
    """)
    requests = cursor.fetchall()

    if not requests:
        await message.answer("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥.")
        return

    for req in requests:
        payment_id, user_id, amount, method, wallet = req
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_payment_{payment_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_payment_{payment_id}")
        )
        
        cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,))
        username = cursor.fetchone()[0] or "N/A"
        
        if method == "CryptoBot":
            instructions = (
                f"–î–ª—è –≤—ã–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot:\n"
                f"1. –û—Ç–∫—Ä–æ–π—Ç–µ @CryptoBot\n"
                f"2. –í—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'\n"
                f"3. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: {amount:.2f} RUB\n"
                f"4. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {wallet}"
            )
        else:
            bank_name, card_number = wallet.split(',', 1) if ',' in wallet else ("–ù–µ —É–∫–∞–∑–∞–Ω", wallet)
            instructions = (
                f"–î–ª—è –≤—ã–ø–ª–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É:\n"
                f"1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞\n"
                f"2. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {amount:.2f} RUB\n"
                f"3. –ù–∞ –∫–∞—Ä—Ç—É: {card_number.strip()}\n"
                f"4. –ë–∞–Ω–∫: {bank_name.strip()}"
            )
        
        await message.answer(
            f"üÜî ID –∑–∞—è–≤–∫–∏: {payment_id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
            f"üí∞ –°—É–º–º–∞: {amount:.2f} RUB\n"
            f"üí≥ –°–ø–æ—Å–æ–±: {method}\n"
            f"üìå –†–µ–∫–≤–∏–∑–∏—Ç—ã: {wallet}\n\n"
            f"{instructions}",
            reply_markup=builder.as_markup()
        )

@dp.callback_query(F.data.startswith("approve_payment_"), F.from_user.id == ADMIN_ID)
async def approve_payment(callback: types.CallbackQuery):
    try:
        payment_id = int(callback.data.split('_')[-1])
        
        cursor.execute("SELECT user_id, amount FROM payments WHERE payment_id = ?", (payment_id,))
        row = cursor.fetchone()
        
        if not row:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        user_id, amount = row
        cursor.execute("UPDATE payments SET status = 'approved' WHERE payment_id = ?", (payment_id,))
        conn.commit()
        
        await callback.message.edit_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{payment_id} –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}\n"
            f"üí∞ –°—É–º–º–∞: {amount:.2f} RUB"
        )
        
        try:
            await bot.send_message(
                user_id,
                f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount:.2f} RUB –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
                f"–î–µ–Ω—å–≥–∏ –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith("reject_payment_"), F.from_user.id == ADMIN_ID)
async def reject_payment(callback: types.CallbackQuery):
    try:
        payment_id = int(callback.data.split('_')[-1])
        
        cursor.execute("SELECT user_id, amount FROM payments WHERE payment_id = ?", (payment_id,))
        row = cursor.fetchone()
        
        if not row:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        user_id, amount = row
        cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
        cursor.execute("UPDATE payments SET status = 'rejected' WHERE payment_id = ?", (payment_id,))
        conn.commit()
        
        await callback.message.edit_text(
            f"‚ùå –ó–∞—è–≤–∫–∞ #{payment_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}\n"
            f"üí∞ –°—É–º–º–∞: {amount:.2f} RUB –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å"
        )
        
        try:
            await bot.send_message(
                user_id,
                f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount:.2f} RUB –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
                f"–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
@dp.message(F.text == "üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", F.from_user.id == ADMIN_ID)
async def show_task_completion_requests(message: types.Message):
    cursor.execute("""
        SELECT ct.id, ct.user_id, ct.task_id, t.description, u.username, ct.completion_date 
        FROM completed_tasks ct
        JOIN tasks t ON ct.task_id = t.task_id
        JOIN users u ON ct.user_id = u.user_id
        WHERE ct.is_verified = FALSE
        ORDER BY ct.completion_date
    """)
    requests = cursor.fetchall()

    if not requests:
        await message.answer("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π.")
        return

    for req in requests:
        request_id, user_id, task_id, task_desc, username, completion_date = req
        
        cursor.execute("""
            SELECT screenshot_id FROM (
                SELECT screenshot_id FROM completed_tasks WHERE id = ?
                UNION ALL
                SELECT screenshot_id FROM task_screenshots WHERE task_completion_id = ?
            ) ORDER BY CASE WHEN rowid = 1 THEN 0 ELSE 1 END
        """, (request_id, request_id))
        screenshots = [row[0] for row in cursor.fetchall()]
        
        if not screenshots:
            await message.answer(
                f"üÜî ID –∑–∞—è–≤–∫–∏: {request_id}\n"
                f"üìå –ó–∞–¥–∞–Ω–∏–µ #{task_id}: {task_desc[:50]}...\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                f"üìÖ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completion_date}\n"
                f"‚ö†Ô∏è –°–∫—Ä–∏–Ω—à–æ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"verify_task_{user_id}_{task_id}"),
                        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_task_{user_id}_{task_id}")
                    ]
                ])
            )
            continue
        
        media_group = []
        for i, screenshot_id in enumerate(screenshots, start=1):
            media_group.append(
                InputMediaPhoto(
                    media=screenshot_id,
                    caption=(
                        f"üÜî ID –∑–∞—è–≤–∫–∏: {request_id}\n"
                        f"üìå –ó–∞–¥–∞–Ω–∏–µ #{task_id}: {task_desc[:50]}...\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                        f"üìÖ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completion_date}\n"
                        f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç {i}/{len(screenshots)}"
                    ) if i == 1 else ""
                )
            )
        
        await bot.send_media_group(
            message.chat.id,
            media=media_group
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"verify_task_{user_id}_{task_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_task_{user_id}_{task_id}")
                ]
            ])
        )

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@dp.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", F.from_user.id == ADMIN_ID)
async def list_users(message: types.Message):
    cursor.execute("""
        SELECT user_id, username, balance, referrals_count, earned_from_refs, is_banned 
        FROM users 
        ORDER BY is_banned, balance DESC 
        LIMIT 50
    """)
    users = cursor.fetchall()

    if not users:
        await message.answer("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ.")
        return

    for user in users:
        user_id, username, balance, refs_count, earned_from_refs, is_banned = user
        
        status = "üî¥ –ó–∞–±–∞–Ω–µ–Ω" if is_banned else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
        username = username if username else "N/A"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚õî –ó–∞–±–∞–Ω–∏—Ç—å" if not is_banned else "‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å",
                    callback_data=f"toggle_ban_{user_id}"
                ),
                InlineKeyboardButton(
                    text="üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                    callback_data=f"user_details_{user_id}"
                )
            ]
        ])
        
        await message.answer(
            f"üÜî ID: {user_id}\n"
            f"üë§ –ù–∏–∫: @{username}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} RUB\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {refs_count}\n"
            f"üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {earned_from_refs:.2f} RUB\n"
            f"–°—Ç–∞—Ç—É—Å: {status}",
            reply_markup=keyboard
        )

@dp.callback_query(F.data.startswith("toggle_ban_"), F.from_user.id == ADMIN_ID)
async def toggle_user_ban(callback: types.CallbackQuery):
    user_id = int(callback.data.split('_')[-1])
    
    cursor.execute("SELECT is_banned, username FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    
    if not result:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    is_banned, username = result
    new_status = not is_banned
    username = username if username else "N/A"
    
    cursor.execute("UPDATE users SET is_banned = ? WHERE user_id = ?", (new_status, user_id))
    conn.commit()
    
    action = "–∑–∞–±–∞–Ω–µ–Ω" if new_status else "—Ä–∞–∑–±–∞–Ω–µ–Ω"
    emoji = "‚õî" if new_status else "‚úÖ"
    
    await callback.message.edit_text(
        f"{emoji} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) {action}!\n\n"
        f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {'üî¥ –ó–∞–±–∞–Ω–µ–Ω' if new_status else 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω'}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_users_list")]
        ])
    )
    
    if new_status:
        try:
            await bot.send_message(
                user_id,
                "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                "–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    else:
        try:
            await bot.send_message(
                user_id,
                "‚úÖ –í—ã —Ä–∞–∑–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start",
                reply_markup=ReplyKeyboardRemove()
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {action}")

@dp.callback_query(F.data.startswith("user_details_"), F.from_user.id == ADMIN_ID)
async def show_user_details(callback: types.CallbackQuery):
    user_id = int(callback.data.split('_')[-1])
    
    cursor.execute("""
        SELECT u.username, u.balance, u.earned, u.referrals_count, u.earned_from_refs, 
               u.is_banned, u.registration_date,
               COUNT(ct.id) as completed_tasks,
               COUNT(p.payment_id) as payments
        FROM users u
        LEFT JOIN completed_tasks ct ON u.user_id = ct.user_id
        LEFT JOIN payments p ON u.user_id = p.user_id
        WHERE u.user_id = ?
    """, (user_id,))
    
    user_data = cursor.fetchone()
    
    if not user_data:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    (username, balance, earned, refs_count, earned_from_refs, 
     is_banned, reg_date, completed_tasks, payments) = user_data
    
    status = "üî¥ –ó–∞–±–∞–Ω–µ–Ω" if is_banned else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
    username = username if username else "N/A"
    
    cursor.execute("""
        SELECT u.username, re.amount, re.earning_date 
        FROM referral_earnings re
        JOIN users u ON re.referral_id = u.user_id
        WHERE re.referrer_id = ?
        ORDER BY re.earning_date DESC
        LIMIT 5
    """, (user_id,))
    referrals = cursor.fetchall()
    
    ref_info = "\n".join(
        [f"‚Ä¢ @{ref[0]} ({ref[1]:.2f} RUB, {ref[2]})" for ref in referrals]
    ) if referrals else "–ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
    
    await callback.message.edit_text(
        f"üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        f"üÜî ID: {user_id}\n"
        f"üë§ –ù–∏–∫: @{username}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} RUB\n"
        f"üíµ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earned:.2f} RUB\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {refs_count}\n"
        f"üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {earned_from_refs:.2f} RUB\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}\n"
        f"üí∏ –í—ã–≤–æ–¥–æ–≤ —Å—Ä–µ–¥—Å—Ç–≤: {payments}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n{ref_info}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚õî –ó–∞–±–∞–Ω–∏—Ç—å" if not is_banned else "‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å",
                    callback_data=f"toggle_ban_{user_id}"
                ),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_users_list")
            ]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_users_list", F.from_user.id == ADMIN_ID)
async def back_to_users_list(callback: types.CallbackQuery):
    await callback.message.delete()
    await list_users(callback.message)
    await callback.answer()

# ========== BROADCAST SYSTEM ==========
class BroadcastStates(StatesGroup):
    message_content = State()
    confirmation = State()

@dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞", F.from_user.id == ADMIN_ID)
async def start_broadcast(message: types.Message, state: FSMContext):
    await state.set_state(BroadcastStates.message_content)
    await message.answer(
        "üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é):",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(BroadcastStates.message_content, F.content_type.in_({'text', 'photo'}))
async def process_broadcast_content(message: types.Message, state: FSMContext):
    content = {}
    
    if message.photo:
        content.update({
            'type': 'photo',
            'file_id': message.photo[-1].file_id,
            'caption': message.caption or ""
        })
    else:
        content.update({
            'type': 'text',
            'text': message.text
        })
    
    await state.update_data(content=content)
    
    # Store the sent message for later editing
    sent_message = None
    preview_text = "üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
    
    if content['type'] == 'photo':
        preview_text += f"üñº –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç: {content['caption']}" if content['caption'] else "üñº –§–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
        sent_message = await message.answer_photo(
            content['file_id'],
            caption=preview_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")]
            ])
        )
    else:
        preview_text += content['text']
        sent_message = await message.answer(
            preview_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")]
            ])
        )
    
    await state.update_data(preview_message_id=sent_message.message_id)
    await state.set_state(BroadcastStates.confirmation)

@dp.callback_query(F.data == "confirm_broadcast", BroadcastStates.confirmation, F.from_user.id == ADMIN_ID)
async def confirm_broadcast(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    content = data['content']
    
    try:
        # Edit the original preview message first
        try:
            if content['type'] == 'photo':
                await callback.message.edit_caption(
                    caption="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...",
                    reply_markup=None
                )
            else:
                await callback.message.edit_text(
                    "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...",
                    reply_markup=None
                )
        except Exception as e:
            logger.error(f"Couldn't edit preview message: {e}")

        cursor.execute("SELECT user_id FROM users WHERE is_banned = FALSE")
        users = cursor.fetchall()
        
        success = 0
        failed = 0
        
        for user in users:
            try:
                if content['type'] == 'photo':
                    await bot.send_photo(
                        user[0],
                        content['file_id'],
                        caption=content['caption']
                    )
                else:
                    await bot.send_message(
                        user[0],
                        content['text']
                    )
                success += 1
            except Exception as e:
                logger.error(f"Failed to send to user {user[0]}: {e}")
                failed += 1
        
        # Send results as new message instead of editing
        await callback.message.answer(
            f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}",
            reply_markup=admin_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Broadcast error: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ",
            reply_markup=admin_keyboard()
        )
    finally:
        await state.clear()

@dp.callback_query(F.data == "cancel_broadcast", BroadcastStates.confirmation, F.from_user.id == ADMIN_ID)
async def cancel_broadcast(callback: types.CallbackQuery, state: FSMContext):
    try:
        if callback.message.photo:
            await callback.message.edit_caption(
                caption="‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=None
            )
    except Exception as e:
        logger.error(f"Couldn't edit cancel message: {e}")
        await callback.message.answer(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=admin_keyboard()
        )
    
    await state.clear()
    await bot.send_message(
        callback.from_user.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=admin_keyboard()
    )

@dp.message(BroadcastStates.message_content)
async def wrong_broadcast_content(message: types.Message):
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)",
        reply_markup=ReplyKeyboardRemove()
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", F.from_user.id == ADMIN_ID)
async def show_stats(message: types.Message):
    cursor.execute("SELECT COUNT(*) FROM users")
    users_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE is_banned = TRUE")
    banned_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM tasks WHERE is_active = TRUE")
    active_tasks = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM completed_tasks")
    completed_tasks = cursor.fetchone()[0]
    
    cursor.execute("SELECT SUM(balance) FROM users")
    total_balance = cursor.fetchone()[0] or 0
    
    cursor.execute("SELECT SUM(earned_from_refs) FROM users")
    total_ref_earnings = cursor.fetchone()[0] or 0
    
    cursor.execute("SELECT SUM(amount) FROM payments WHERE status = 'approved'")
    total_payouts = cursor.fetchone()[0] or 0
    
    cursor.execute("SELECT SUM(amount) FROM payments WHERE status = 'pending'")
    pending_payouts = cursor.fetchone()[0] or 0

    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count} (üî¥ {banned_count} –∑–∞–±–∞–Ω–µ–Ω–æ)\n"
        f"üìå –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {active_tasks}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.2f} RUB\n"
        f"üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_ref_earnings:.2f} RUB\n"
        f"üí∏ –í—ã–ø–ª–∞—á–µ–Ω–æ: {total_payouts:.2f} RUB\n"
        f"‚è≥ –ù–∞ –≤—ã–ø–ª–∞—Ç–µ: {pending_payouts:.2f} RUB"
    )

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())